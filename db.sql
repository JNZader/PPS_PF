-- Tablas
CREATE TABLE usuarios (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    nombres text DEFAULT 'generico' NOT NULL,
    nro_doc text DEFAULT '-',
    telefono text DEFAULT '-',
    direccion text DEFAULT '-',
    fecharegistro date NOT NULL,
    estado text DEFAULT 'activo',
    tipouser text NOT NULL,
    idauth text NOT NULL,
    tipodoc text DEFAULT '-',
    correo text DEFAULT '-',
    PRIMARY KEY (id)
);

CREATE TABLE empresa (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    nombre text NOT NULL,
    simbolomoneda text,
    iduseradmin bigint,
    id_empresa bigint,
    PRIMARY KEY (id)
);

CREATE TABLE asignarempresa (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    id_empresa bigint NOT NULL,
    id_usuario bigint,
    PRIMARY KEY (id)
);

CREATE TABLE categorias (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    descripcion text NOT NULL,
    id_empresa bigint,
    color text,
    PRIMARY KEY (id)
);

CREATE TABLE marca (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    descripcion text NOT NULL,
    id_empresa bigint,
    PRIMARY KEY (id)
);

CREATE TABLE modulos (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    nombre text NOT NULL,
    "check" boolean DEFAULT false,
    PRIMARY KEY (id)
);

CREATE TABLE permisos (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    id_usuario bigint NOT NULL,
    idmodulo bigint,
    PRIMARY KEY (id)
);

CREATE TABLE productos (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    descripcion text NOT NULL,
    idmarca bigint,
    stock numeric,
    stock_minimo bigint,
    codigobarras text,
    codigointerno text,
    precioventa numeric,
    preciocompra numeric,
    id_categoria bigint,
    id_empresa bigint,
    PRIMARY KEY (id)
);

CREATE TABLE kardex (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    fecha date NOT NULL,
    tipo text,
    id_usuario bigint,
    id_producto bigint,
    cantidad double precision,
    id_empresa bigint,
    detalle text,
    estado bigint DEFAULT 1 NOT NULL,
    PRIMARY KEY (id)
);

-- Claves for√°neas
ALTER TABLE asignarempresa
ADD CONSTRAINT asignarempresa_id_empresa_fkey FOREIGN KEY (id_empresa) REFERENCES empresa(id);

ALTER TABLE asignarempresa
ADD CONSTRAINT asignarempresa_id_usuario_fkey FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE CASCADE;

ALTER TABLE categorias
ADD CONSTRAINT categorias_id_empresa_fkey FOREIGN KEY (id_empresa) REFERENCES empresa(id) ON DELETE CASCADE;

ALTER TABLE empresa
ADD CONSTRAINT empresa_id_empresa_fkey FOREIGN KEY (id_empresa) REFERENCES empresa(id);

ALTER TABLE empresa
ADD CONSTRAINT empresa_iduseradmin_fkey FOREIGN KEY (iduseradmin) REFERENCES usuarios(id) ON DELETE CASCADE;

ALTER TABLE kardex
ADD CONSTRAINT kardex_id_empresa_fkey FOREIGN KEY (id_empresa) REFERENCES empresa(id);

ALTER TABLE kardex
ADD CONSTRAINT kardex_id_producto_fkey FOREIGN KEY (id_producto) REFERENCES productos(id);

ALTER TABLE kardex
ADD CONSTRAINT kardex_id_usuario_fkey FOREIGN KEY (id_usuario) REFERENCES usuarios(id);

ALTER TABLE marca
ADD CONSTRAINT marca_id_empresa_fkey FOREIGN KEY (id_empresa) REFERENCES empresa(id) ON DELETE CASCADE;

ALTER TABLE permisos
ADD CONSTRAINT permisos_id_usuario_fkey FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE CASCADE;

ALTER TABLE permisos
ADD CONSTRAINT permisos_idmodulo_fkey FOREIGN KEY (idmodulo) REFERENCES modulos(id);

ALTER TABLE productos
ADD CONSTRAINT productos_id_categoria_fkey FOREIGN KEY (id_categoria) REFERENCES categorias(id);

ALTER TABLE productos
ADD CONSTRAINT productos_id_empresa_fkey FOREIGN KEY (id_empresa) REFERENCES empresa(id) ON DELETE CASCADE;

ALTER TABLE productos
ADD CONSTRAINT productos_idmarca_fkey FOREIGN KEY (idmarca) REFERENCES marca(id);

-- Funciones
CREATE FUNCTION buscarkardexempresa(_id_empresa integer, buscador text)
RETURNS TABLE (
    id integer,
    descripcion text,
    fecha text,
    cantidad double precision,
    tipo text,
    detalle text,
    nombres text,
    stock numeric,
    estado integer
)
LANGUAGE sql AS $$
SELECT k.id, COALESCE(p.descripcion, 'Sin producto') AS descripcion, to_char(k.fecha, 'YYYY-MM-DD') AS fecha, k.cantidad, k.tipo, k.detalle, COALESCE(u.nombres, 'Sin usuario') AS nombres, p.stock, k.estado
FROM kardex k
LEFT JOIN empresa e ON e.id = k.id_empresa
LEFT JOIN usuarios u ON u.id = k.id_usuario
LEFT JOIN productos p ON p.id = k.id_producto
WHERE k.id_empresa = _id_empresa
AND (p.descripcion ILIKE '%' || buscador || '%' OR buscador IS NULL OR buscador = '');
$$;

CREATE FUNCTION buscarpersonal(_id_empresa integer, buscador text)
RETURNS TABLE(id integer, nombres text, tipouser text, estado text, correo text, nro_doc text, telefono text, direccion text, tipodoc text)
LANGUAGE sql AS $$
SELECT u.id, u.nombres, u.tipouser, u.estado, u.correo, u.nro_doc, u.telefono, u.direccion, u.tipodoc
FROM asignarempresa
INNER JOIN usuarios u ON u.id = asignarempresa.id_usuario
INNER JOIN empresa ON empresa.id = asignarempresa.id_empresa
WHERE u.nombres ILIKE '%' || buscador || '%' AND asignarempresa.id_empresa = _id_empresa
$$;

CREATE FUNCTION buscarproductos(_id_empresa integer, buscador text)
RETURNS TABLE(id integer, descripcion text, idmarca integer, stock numeric, stock_minimo numeric, codigobarras text, codigointerno text, precioventa numeric, preciocompra numeric, id_categoria integer, id_empresa integer, marca text, categoria text, color text)
LANGUAGE sql AS $$
SELECT p.id, p.descripcion, p.idmarca, p.stock, p.stock_minimo, p.codigobarras, p.codigointerno, p.precioventa, p.preciocompra, p.id_categoria, p.id_empresa, m.descripcion AS marca, c.descripcion AS categoria, c.color
FROM productos p
INNER JOIN categorias c ON c.id = p.id_categoria
INNER JOIN marca m ON m.id = p.idmarca
WHERE p.descripcion ILIKE '%' || buscador || '%' AND p.id_empresa = _id_empresa;
$$;

CREATE FUNCTION contar_usuarios_por_empresa(_id_empresa integer)
RETURNS integer
LANGUAGE plpgsql AS $$
DECLARE
    cantidad_usuarios int;
BEGIN
    SELECT count(*) INTO cantidad_usuarios
    FROM asignarempresa
    WHERE id_empresa = _id_empresa;
    RETURN cantidad_usuarios;
END;
$$;

CREATE FUNCTION eliminarkardexdisparado()
RETURNS trigger
LANGUAGE plpgsql AS $$
BEGIN
    INSERT INTO kardex(fecha, tipo, id_usuario, id_producto, cantidad, id_empresa, detalle, estado)
    VALUES (now(), old.tipo || '-anulado', old.id_usuario, old.id_producto, old.cantidad, old.id_empresa, old.detalle || '-anulado', 0);
    UPDATE productos
    SET stock = stock + old.cantidad
    WHERE id = old.id_producto;
    RETURN old;
END;
$$;

CREATE FUNCTION insertarcategorias(_descripcion text, _idempresa integer, _color text)
RETURNS void
LANGUAGE plpgsql AS $$
BEGIN
    PERFORM 1 FROM categorias WHERE descripcion = _descripcion AND id_empresa = _idempresa;
    IF FOUND THEN
        RAISE EXCEPTION 'Datos duplicados';
    ELSE
        INSERT INTO categorias(descripcion, id_empresa, color)
        VALUES (_descripcion, _idempresa, _color);
    END IF;
END;
$$;

CREATE FUNCTION insertarmarca(_descripcion text, _idempresa integer)
RETURNS void
LANGUAGE plpgsql AS $$
BEGIN
    PERFORM 1 FROM marca WHERE descripcion = _descripcion AND id_empresa = _idempresa;
    IF FOUND THEN
        RAISE EXCEPTION 'Datos duplicados';
    ELSE
        INSERT INTO marca(descripcion, id_empresa)
        VALUES (_descripcion, _idempresa);
    END IF;
END;
$$;

CREATE FUNCTION insertarproductos(_descripcion text, _idmarca integer, _stock numeric, _stock_minimo numeric, _codigobarras text, _codigointerno text, _precioventa numeric, _preciocompra numeric, _id_categoria integer, _id_empresa integer)
RETURNS void
LANGUAGE plpgsql AS $$
BEGIN
    PERFORM 1 FROM productos WHERE descripcion = _descripcion AND id_empresa = _id_empresa;
    IF FOUND THEN
        RAISE EXCEPTION 'Datos duplicados';
    ELSE
        INSERT INTO productos(descripcion, idmarca, stock, stock_minimo, codigobarras, codigointerno, precioventa, preciocompra, id_categoria, id_empresa)
        VALUES (_descripcion, _idmarca, _stock, _stock_minimo, _codigobarras, _codigointerno, _precioventa, _preciocompra, _id_categoria, _id_empresa);
    END IF;
END;
$$;

CREATE FUNCTION insertpermisos()
RETURNS trigger
LANGUAGE plpgsql AS $$
DECLARE
    item record;
BEGIN
    RAISE NOTICE 'Inserting permissions for user ID: % with tipouser: %', new.id, new.tipouser;
    IF new.tipouser = 'superadmin' THEN
        RAISE NOTICE 'Creating empresa for user ID: %', new.id;
        INSERT INTO empresa(nombre, simbolomoneda, iduseradmin)
        VALUES ('Generica', '$/.', new.id);
    END IF;
    FOR item IN SELECT id FROM modulos LOOP
        IF new.tipouser = 'superadmin' THEN
            RAISE NOTICE 'Assigning modulo ID: % to user ID: %', item.id, new.id;
            INSERT INTO permisos(id_usuario, idmodulo)
            VALUES (new.id, item.id);
        END IF;
    END LOOP;
    RETURN new;
END;
$$;

CREATE FUNCTION insertpordefecto()
RETURNS trigger
LANGUAGE plpgsql AS $$
DECLARE
    item record;
BEGIN
    INSERT INTO marca(descripcion, id_empresa)
    VALUES ('Generica', new.id);
    INSERT INTO categorias(descripcion, color, id_empresa)
    VALUES ('General', '#FF5722', new.id);
    INSERT INTO asignarempresa(id_empresa, id_usuario)
    VALUES (new.id, new.iduseradmin);
    RETURN new;
END;
$$;

CREATE FUNCTION inventariovalorado(_id_empresa integer)
RETURNS TABLE(id integer, descripcion text, stock numeric, preciocompra numeric, total numeric)
LANGUAGE sql AS $$
SELECT id, descripcion, stock, preciocompra, (stock * preciocompra) AS total
FROM productos
WHERE productos.id_empresa = _id_empresa
$$;

CREATE FUNCTION modificarstock()
RETURNS trigger
LANGUAGE plpgsql AS $$
DECLARE
    stockproducto numeric;
BEGIN
    RAISE NOTICE 'Actualizando stock para id_producto: %, cantidad: %, tipo: %', new.id_producto, new.cantidad, new.tipo;
    IF new.tipo = 'entrada' THEN
        UPDATE productos
        SET stock = stock + new.cantidad
        WHERE id = new.id_producto;
    ELSE
        SELECT stock INTO stockproducto
        FROM productos
        WHERE id = new.id_producto;
        IF stockproducto > new.cantidad THEN
            UPDATE productos
            SET stock = stock - new.cantidad
            WHERE id = new.id_producto;
        ELSE
            RAISE EXCEPTION 'Stock agotado para este producto';
        END IF;
    END IF;
    RETURN new;
END;
$$;

CREATE FUNCTION mostrarkardexempresa(_id_empresa integer)
RETURNS TABLE (
    id integer,
    descripcion text,
    fecha text,
    cantidad double precision,
    tipo text,
    detalle text,
    nombres text,
    stock numeric,
    estado integer
)
LANGUAGE sql AS $$
SELECT k.id, COALESCE(p.descripcion, 'Sin producto') AS descripcion, to_char(k.fecha, 'YYYY-MM-DD') AS fecha, k.cantidad, k.tipo, k.detalle, COALESCE(u.nombres, 'Sin usuario') AS nombres, p.stock, k.estado
FROM kardex k
LEFT JOIN empresa e ON e.id = k.id_empresa
LEFT JOIN usuarios u ON u.id = k.id_usuario
LEFT JOIN productos p ON p.id = k.id_producto
WHERE k.id_empresa = _id_empresa;
$$;

CREATE FUNCTION mostrarpersonal(_id_empresa integer)
RETURNS TABLE(id integer, nombres text, tipouser text, estado text, correo text, nro_doc text, telefono text, direccion text, tipodoc text)
LANGUAGE sql AS $$
SELECT u.id, u.nombres, u.tipouser, u.estado, u.correo, u.nro_doc, u.telefono, u.direccion, u.tipodoc
FROM asignarempresa
INNER JOIN usuarios u ON u.id = asignarempresa.id_usuario
INNER JOIN empresa ON empresa.id = asignarempresa.id_empresa
WHERE asignarempresa.id_empresa = _id_empresa
$$;

CREATE FUNCTION mostrarproductos(_id_empresa integer)
RETURNS TABLE(id integer, descripcion text, idmarca integer, stock numeric, stock_minimo numeric, codigobarras text, codigointerno text, precioventa numeric, preciocompra numeric, id_categoria integer, id_empresa integer, marca text, categoria text, color text)
LANGUAGE sql AS $$
SELECT p.id, p.descripcion, p.idmarca, p.stock, p.stock_minimo, p.codigobarras, p.codigointerno, p.precioventa, p.preciocompra, p.id_categoria, p.id_empresa, m.descripcion AS marca, c.descripcion AS categoria, c.color
FROM productos p
INNER JOIN categorias c ON c.id = p.id_categoria
INNER JOIN marca m ON m.id = p.idmarca
WHERE p.id_empresa = _id_empresa;
$$;

CREATE FUNCTION reportproductosbajominimo(_id_empresa integer)
RETURNS TABLE (
    id integer,
    descripcion text,
    stock numeric,
    stock_minimo numeric,
    codigobarras text,
    codigointerno text,
    precioventa numeric,
    preciocompra numeric,
    id_empresa integer
)
LANGUAGE sql AS $$
SELECT p.id, p.descripcion, p.stock, p.stock_minimo, p.codigobarras, p.codigointerno, p.precioventa, p.preciocompra, p.id_empresa
FROM productos p
WHERE p.id_empresa = _id_empresa
AND COALESCE(p.stock, 0) <= COALESCE(p.stock_minimo, 0);
$$;

-- Triggers
CREATE TRIGGER eliminarkardextrigger
BEFORE DELETE ON kardex
FOR EACH ROW EXECUTE FUNCTION eliminarkardexdisparado();

CREATE TRIGGER permisostrigger
AFTER INSERT ON usuarios
FOR EACH ROW EXECUTE FUNCTION insertpermisos();

CREATE TRIGGER pordefectotrigger
AFTER INSERT ON empresa
FOR EACH ROW EXECUTE FUNCTION insertpordefecto();

CREATE TRIGGER modificarkardextrigger
AFTER INSERT ON kardex
FOR EACH ROW EXECUTE FUNCTION modificarstock();

-- Pol√≠ticas RLS (mantenidas seg√∫n solicitud)
CREATE POLICY "Enable read access for all users" ON public.asignarempresa FOR SELECT TO authenticated USING (auth.uid()::text = (SELECT idauth FROM usuarios WHERE id = id_usuario));
CREATE POLICY "Enable read access for all users" ON public.categorias FOR SELECT TO authenticated USING (true);
CREATE POLICY "Enable read access for all users" ON public.empresa FOR SELECT TO authenticated USING (auth.uid()::text = (SELECT idauth FROM usuarios WHERE id = iduseradmin));
CREATE POLICY "Enable read access for all users" ON public.marca FOR SELECT TO authenticated USING (true);
CREATE POLICY "Enable read access for all users" ON public.modulos FOR SELECT TO authenticated USING (true);
CREATE POLICY "Enable read access for all users" ON public.permisos FOR SELECT TO authenticated USING (auth.uid()::text = (SELECT idauth FROM usuarios WHERE id = id_usuario));
CREATE POLICY "Enable read access for all users" ON public.productos FOR SELECT TO authenticated USING (true);
CREATE POLICY "Enable read access for all users" ON public.usuarios FOR SELECT TO authenticated USING (auth.uid()::text = idauth);
CREATE POLICY "Enable read access for all users" ON public.kardex FOR SELECT TO authenticated USING (true);

CREATE POLICY "Enable insert for authenticated users only" ON public.asignarempresa FOR INSERT TO authenticated WITH CHECK (auth.uid()::text = (SELECT idauth FROM usuarios WHERE id = id_usuario));
CREATE POLICY "Enable insert for authenticated users only" ON public.categorias FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "Enable insert for authenticated users only" ON public.empresa FOR INSERT TO authenticated WITH CHECK (auth.uid()::text = (SELECT idauth FROM usuarios WHERE id = iduseradmin));
CREATE POLICY "Enable insert for authenticated users only" ON public.kardex FOR INSERT TO authenticated WITH CHECK (auth.uid()::text = (SELECT idauth FROM usuarios WHERE id = id_usuario));
CREATE POLICY "Enable insert for authenticated users only" ON public.marca FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "Enable insert for authenticated users only" ON public.modulos FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "Enable insert for authenticated users only" ON public.permisos FOR INSERT TO authenticated WITH CHECK (auth.uid()::text = (SELECT idauth FROM usuarios WHERE id = id_usuario));
CREATE POLICY "Enable insert for authenticated users only" ON public.productos FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "Enable insert for authenticated users only" ON public.usuarios FOR INSERT TO authenticated WITH CHECK (auth.uid()::text = idauth);

CREATE POLICY "Enable update for superadmin" ON public.asignarempresa FOR UPDATE TO authenticated USING (auth.uid()::text = (SELECT idauth FROM usuarios WHERE id = id_usuario AND tipouser = 'superadmin')) WITH CHECK (auth.uid()::text = (SELECT idauth FROM usuarios WHERE id = id_usuario AND tipouser = 'superadmin'));
CREATE POLICY "Enable update for superadmin" ON public.categorias FOR UPDATE TO authenticated USING (auth.uid()::text = (SELECT idauth FROM usuarios WHERE tipouser = 'superadmin')) WITH CHECK (auth.uid()::text = (SELECT idauth FROM usuarios WHERE tipouser = 'superadmin'));
CREATE POLICY "Enable update for superadmin" ON public.empresa FOR UPDATE TO authenticated USING (auth.uid()::text = (SELECT idauth FROM usuarios WHERE id = iduseradmin AND tipouser = 'superadmin')) WITH CHECK (auth.uid()::text = (SELECT idauth FROM usuarios WHERE id = iduseradmin AND tipouser = 'superadmin'));
CREATE POLICY "Enable update for superadmin" ON public.marca FOR UPDATE TO authenticated USING (auth.uid()::text = (SELECT idauth FROM usuarios WHERE tipouser = 'superadmin')) WITH CHECK (auth.uid()::text = (SELECT idauth FROM usuarios WHERE tipouser = 'superadmin'));
CREATE POLICY "Enable update for superadmin" ON public.modulos FOR UPDATE TO authenticated USING (auth.uid()::text = (SELECT idauth FROM usuarios WHERE tipouser = 'superadmin')) WITH CHECK (auth.uid()::text = (SELECT idauth FROM usuarios WHERE tipouser = 'superadmin'));
CREATE POLICY "Enable update for superadmin" ON public.permisos FOR UPDATE TO authenticated USING (auth.uid()::text = (SELECT idauth FROM usuarios WHERE id = id_usuario AND tipouser = 'superadmin')) WITH CHECK (auth.uid()::text = (SELECT idauth FROM usuarios WHERE id = id_usuario AND tipouser = 'superadmin'));
CREATE POLICY "Enable update for superadmin" ON public.productos FOR UPDATE TO authenticated USING (auth.uid()::text = (SELECT idauth FROM usuarios WHERE tipouser = 'superadmin')) WITH CHECK (auth.uid()::text = (SELECT idauth FROM usuarios WHERE tipouser = 'superadmin'));
CREATE POLICY "Enable update for superadmin" ON public.usuarios FOR UPDATE TO authenticated USING (auth.uid()::text = idauth AND tipouser = 'superadmin') WITH CHECK (auth.uid()::text = idauth AND tipouser = 'superadmin');
CREATE POLICY "Enable update for superadmin" ON public.kardex FOR UPDATE TO authenticated USING (auth.uid()::text = (SELECT idauth FROM usuarios WHERE id = id_usuario AND tipouser = 'superadmin')) WITH CHECK (auth.uid()::text = (SELECT idauth FROM usuarios WHERE id = id_usuario AND tipouser = 'superadmin'));

CREATE POLICY "Enable delete for superadmin" ON public.asignarempresa FOR DELETE TO authenticated USING (auth.uid()::text = (SELECT idauth FROM usuarios WHERE id = id_usuario AND tipouser = 'superadmin'));
CREATE POLICY "Enable delete for superadmin" ON public.categorias FOR DELETE TO authenticated USING (auth.uid()::text = (SELECT idauth FROM usuarios WHERE tipouser = 'superadmin'));
CREATE POLICY "Enable delete for superadmin" ON public.empresa FOR DELETE TO authenticated USING (auth.uid()::text = (SELECT idauth FROM usuarios WHERE id = iduseradmin AND tipouser = 'superadmin'));
CREATE POLICY "Enable delete for superadmin" ON public.kardex FOR DELETE TO authenticated USING (auth.uid()::text = (SELECT idauth FROM usuarios WHERE id = id_usuario AND tipouser = 'superadmin'));
CREATE POLICY "Enable delete for superadmin" ON public.marca FOR DELETE TO authenticated USING (auth.uid()::text = (SELECT idauth FROM usuarios WHERE tipouser = 'superadmin'));
CREATE POLICY "Enable delete for superadmin" ON public.modulos FOR DELETE TO authenticated USING (auth.uid()::text = (SELECT idauth FROM usuarios WHERE tipouser = 'superadmin'));
CREATE POLICY "Enable delete for superadmin" ON public.permisos FOR DELETE TO authenticated USING (auth.uid()::text = (SELECT idauth FROM usuarios WHERE id = id_usuario AND tipouser = 'superadmin'));
CREATE POLICY "Enable delete for superadmin" ON public.productos FOR DELETE TO authenticated USING (auth.uid()::text = (SELECT idauth FROM usuarios WHERE tipouser = 'superadmin'));
CREATE POLICY "Enable delete for superadmin" ON public.usuarios FOR DELETE TO authenticated USING (auth.uid()::text = idauth AND tipouser = 'superadmin');

-- Datos iniciales
INSERT INTO modulos VALUES (1, 'Salidas varias', false);
INSERT INTO modulos VALUES (2, 'Productos', false);
INSERT INTO modulos VALUES (3, 'Personal', false);
INSERT INTO modulos VALUES (4, 'Tu empresa', false);
INSERT INTO modulos VALUES (5, 'Categoria de productos', false);
INSERT INTO modulos VALUES (6, 'Marca de productos', false);
INSERT INTO modulos VALUES (7, 'Kardex', false);

SELECT pg_catalog.setval('modulos_id_seq', 7, true);
CREATE OR REPLACE FUNCTION reportekardexporproducto(_id_empresa integer, _id_producto_filter integer)
RETURNS TABLE (
  id integer,
  descripcion text,
  fecha text,
  cantidad double precision,
  tipo text,
  detalle text,
  nombres text,
  stock numeric,
  estado integer
)
LANGUAGE sql AS $$
SELECT k.id, COALESCE(p.descripcion, 'Sin producto') AS descripcion, to_char(k.fecha, 'YYYY-MM-DD') AS fecha, k.cantidad, k.tipo, k.detalle, COALESCE(u.nombres, 'Sin usuario') AS nombres, p.stock, k.estado
FROM kardex k
LEFT JOIN empresa e ON e.id = k.id_empresa
LEFT JOIN usuarios u ON u.id = k.id_usuario
LEFT JOIN productos p ON p.id = k.id_producto
WHERE k.id_empresa = _id_empresa AND k.id_producto = _id_producto_filter;
$$;
DROP FUNCTION IF EXISTS public.contar_usuarios_por_empresa(integer);

CREATE OR REPLACE FUNCTION public.contar_usuarios_por_empresa(_id_empresa integer)
RETURNS integer
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    cantidad_usuarios int;
BEGIN
    SELECT count(*)
    INTO cantidad_usuarios
    FROM public.asignarempresa
    WHERE id_empresa = _id_empresa;
    RETURN cantidad_usuarios;
END;
$$;

GRANT EXECUTE ON FUNCTION public.contar_usuarios_por_empresa(integer) TO authenticated, anon;

SELECT * FROM pg_proc WHERE proname = 'contar_usuarios_por_empresa' AND pronamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'public');
ALTER TABLE public.empresa
ADD COLUMN cuit text,
ADD COLUMN direccion text,
ADD COLUMN telefono text,
ADD COLUMN rubro text,
ADD COLUMN logo_url text;
-- Habilitar la extensi√≥n de trigramas para b√∫squedas de texto eficientes
-- Si ya est√° habilitada, este comando no har√° nada.
CREATE EXTENSION IF NOT EXISTS pg_trgm;

---
-- ## √çndices Simples ##
-- Mejoran el rendimiento de los JOINs y filtros en columnas espec√≠ficas.
---

-- √çndices para la tabla KARDEX (muy importante por su gran volumen de datos)
CREATE INDEX IF NOT EXISTS idx_kardex_id_empresa ON kardex(id_empresa);
CREATE INDEX IF NOT EXISTS idx_kardex_id_producto ON kardex(id_producto);
CREATE INDEX IF NOT EXISTS idx_kardex_fecha ON kardex(fecha);
CREATE INDEX IF NOT EXISTS idx_kardex_id_usuario ON kardex(id_usuario);


-- √çndices para la tabla PRODUCTOS
CREATE INDEX IF NOT EXISTS idx_productos_id_empresa ON productos(id_empresa);
CREATE INDEX IF NOT EXISTS idx_productos_id_categoria ON productos(id_categoria);
CREATE INDEX IF NOT EXISTS idx_productos_idmarca ON productos(idmarca);


-- √çndices para la tabla ASIGNAREMPRESA
CREATE INDEX IF NOT EXISTS idx_asignarempresa_id_usuario ON asignarempresa(id_usuario);
CREATE INDEX IF NOT EXISTS idx_asignarempresa_id_empresa ON asignarempresa(id_empresa);


-- √çndices para la tabla PERMISOS
CREATE INDEX IF NOT EXISTS idx_permisos_id_usuario ON permisos(id_usuario);
CREATE INDEX IF NOT EXISTS idx_permisos_idmodulo ON permisos(idmodulo);


-- Otros √≠ndices sobre claves for√°neas
CREATE INDEX IF NOT EXISTS idx_categorias_id_empresa ON categorias(id_empresa);
CREATE INDEX IF NOT EXISTS idx_marca_id_empresa ON marca(id_empresa);
CREATE INDEX IF NOT EXISTS idx_empresa_iduseradmin ON empresa(iduseradmin);


---
-- ## √çndices de Texto (GIN con Trigramas) ##
-- Aceleran dr√°sticamente las b√∫squedas con ILIKE '%texto%'.
---

CREATE INDEX IF NOT EXISTS idx_productos_descripcion_gin ON productos USING gin (descripcion gin_trgm_ops);
CREATE INDEX IF NOT EXISTS idx_usuarios_nombres_gin ON usuarios USING gin (nombres gin_trgm_ops);


---
-- ## √çndices Compuestos ##
-- Optimizan consultas que filtran por m√∫ltiples columnas a la vez.
---

-- Para buscar eficientemente en el kardex de una empresa por producto o por fecha
CREATE INDEX IF NOT EXISTS idx_kardex_empresa_producto ON kardex(id_empresa, id_producto);
CREATE INDEX IF NOT EXISTS idx_kardex_empresa_fecha ON kardex(id_empresa, fecha DESC);

-- Para buscar eficientemente productos de una empresa
CREATE INDEX IF NOT EXISTS idx_productos_empresa_descripcion ON productos(id_empresa, descripcion);